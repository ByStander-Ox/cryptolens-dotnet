{"name":"SKGL Extension for .NET","tagline":"","body":"# SKGL Extension for .NET\r\n\r\nThis API is intergrated with the Serial Key Manager Web API 2.0 (http://docs.serialkeymanager.com/)\r\n\r\nThe original repository of this project was: https://skgl.codeplex.com/.\r\nNB: This is only SKGL.SKM, not the entire SKGL API.\r\n\r\n##How to use\r\n1. [Key Validation](#key-validation)\r\n2. [Key Activation](#key-activation)\r\n3. [Offline Key Validation](#offline-key-validation)\r\n4. [List User Products](#list-user-products)\r\n5. [Get Product Variables](#get-product-variables)\r\n6. [Check Against Time Rollback](#check-against-time-rollback)\r\n7. [Other Methods in Web API](#other-methods-in-web-api)\r\n8. [Calculating Machine code](#calculating-machine-code)\r\n\r\n###Key Validation\r\nFor *pid*, *uid* and *hsum*, please see https://serialkeymanager.com/Ext/Val. You can retreive them using  [Get Product Variables](#get-product-variables).\r\n```\r\npublic void KeyValiation()\r\n{\r\n    var validationResult = SKGL.SKM.KeyValidation(\"pid\", \"uid\", \"hsum\", \"serial key to validate\");\r\n\r\n    var newKey = validationResult.NewKey;\r\n\r\n    if (validationResult.Valid)\r\n    {\r\n        //valid key\r\n        var created = validationResult.CreationDate;\r\n        var expires = validationResult.ExpirationDate;\r\n        var setTime = validationResult.SetTime;\r\n        var timeLeft = validationResult.TimeLeft;\r\n        var features = validationResult.Features;\r\n\r\n    }\r\n    else\r\n    {\r\n        //invalid key\r\n        Assert.Fail();\r\n    }\r\n}\r\n```\r\n\r\n###Key Activation\r\nFor *pid*, *uid* and *hsum*, please see https://serialkeymanager.com/Ext/Val.\r\n\r\nNB: If trial activation is configured, the API can return a new key (read more [here](http://support.serialkeymanager.com/howto/trial-activation/)).\r\n```\r\npublic void KeyActivation()\r\n{\r\n    var validationResult = SKGL.SKM.KeyActivation(\"pid\", \"uid\", \"hsum\", \"serial key to validate\", \"machine code\", {sign the data}, {sign machine code});\r\n\r\n    if (validationResult.Valid)\r\n    {\r\n        //valid key\r\n        var created = validationResult.CreationDate;\r\n        var expires = validationResult.ExpirationDate;\r\n        var setTime = validationResult.SetTime;\r\n        var timeLeft = validationResult.TimeLeft;\r\n        var features = validationResult.Features;\r\n    }\r\n    else\r\n    {\r\n        //invalid key\r\n        Assert.Fail();\r\n    }\r\n}\r\n```\r\n###Offline key validation\r\nRead more about offline key validation [here](http://support.serialkeymanager.com/howto/passive-key-validation-offline/).\r\n```\r\npublic void SecureKeyValidation()\r\n{\r\n    // your public key can be found at http://serialkeymanager.com/Account/Manage.\r\n    string rsaPublicKey = \"<RSAKeyValue><Modulus>pL01ClSf7U5kp2E7C9qFecZGiaV8rFpET1u9QvuBrLNkCRB5mQFiaCqHyJd8Wj5o/vkBAenQO+K45hLQakve/iAmr4NX/Hca9WyN8DVhif6p9wD+FIGWeheOkbcrfiFgMzC+3g/w1n73fK0GCLF4j2kqnWrDBjaB4WfzmtA5hmrBFX3u9xcYed+dXWJW/I4MYmG0cQiBqR/P5xTTE+zZWOXwvmSZZaMvBh884H9foLgPWWsLllobQTHUqRq6pr48XrQ8GjV7oGigTImolenMLSR59anDCIhZy59PPsi2WE7OoYP8ecNvkdHWr1RlEFtx4bUZr3FPNWLm7QIq7AWwgw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>\";\r\n    \r\n    SKGL.KeyInformation keyInfo = new SKGL.KeyInformation();\r\n    bool fileLoaded = false;\r\n\r\n    try\r\n    {\r\n        keyInfo = SKGL.SKM.LoadKeyInformationFromFile(\"file.txt\");\r\n        fileLoaded = true;\r\n    }\r\n    catch{}\r\n\r\n\r\n    if(fileLoaded)\r\n    {\r\n        if (SKGL.SKM.IsKeyInformationGenuine(keyInfo, rsaPublicKey))\r\n        {\r\n            // if we've come so far, we know that\r\n            // * the key has been checked against the database once\r\n            // * the file with the key infromation has not been modified.\r\n\r\n            // check the key\r\n            if (keyInfo.Valid)\r\n            {\r\n                // here we can retrive some useful info\r\n                Console.WriteLine(keyInfo.CreationDate);\r\n                //... etc.\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Assert.Fail();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // it's crucial that both json and secure are set to true\r\n        keyInfo = SKGL.SKM.KeyValidation(\"pid\", \"uid\", \"hsum\", \"serial key\", {sign key information file}); // KeyActivation method works also.\r\n\r\n        if(keyInfo.Valid)\r\n        {\r\n            SKGL.SKM.SaveKeyInformationToFile(keyInfo, \"file.txt\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n###List User Products\r\n```\r\npublic void ListAllProducts()\r\n{\r\n    var listOfProducts = SKGL.SKM.ListUserProducts(\"username\", \"password\");\r\n\r\n    foreach (var product in listOfProducts)\r\n    {\r\n        Debug.WriteLine(\"The product with the name \\\"\"+ product.Key + \"\\\" has the pid \\\"\" + product.Value + \"\\\"\");\r\n    }\r\n}\r\n```\r\n\r\n###Get Product Variables\r\nThis will get *pid*, *uid* and *hsum*.\r\n```\r\npublic void GetProductVariables()\r\n{\r\n    var listOfProducts = SKGL.SKM.ListUserProducts(\"username\", \"password\");\r\n\r\n    //variables needed in for instance validation/activation\r\n    //note, First requires System.Linq.\r\n    var productVar = SKGL.SKM.GetProductVariables(\"username\",\"password\", listOfProducts.First().Value);\r\n\r\n    Debug.WriteLine(\"The uid=\" + productVar.UID + \", pid=\" + productVar.PID + \" and hsum=\" + productVar.HSUM);\r\n}\r\n```\r\n\r\n###Check Against Time Rollback\r\nIn order to make sure that the local time (date and time) was changed by the user, the following code can be used.\r\n```\r\npublic void HasLocalTimeChanged()\r\n{\r\n    bool hasChanged = SKGL.SKM.TimeCheck();\r\n\r\n    if(hasChanged)\r\n    {\r\n        Debug.WriteLine(\"The local time was changed by the user. Validation fails.\");\r\n    }\r\n    else\r\n    {\r\n        Debug.WriteLine(\"The local time hasn't been changed. Continue validation.\");\r\n    }\r\n}\r\n```\r\n\r\n###Other Methods in Web API\r\nIf you would like to access a method in the Web API manually, please use *GetParameters* method. A list of them can be found [here](http://docs.serialkeymanager.com/web-api/).\r\n```\r\npublic void GetParamtersTest()\r\n{\r\n    var input = new System.Collections.Generic.Dictionary<string, string>();\r\n    input.Add(\"uid\", \"1\");\r\n    input.Add(\"pid\", \"1\");\r\n    input.Add(\"hsum\", \"11111\");\r\n    input.Add(\"sid\", \"ABCD-EFGHI-GKLMN-OPQRS\");\r\n    input.Add(\"sign\",\"true\");\r\n\r\n    var result = SKGL.SKM.GetParameters(input, \"Validate\");\r\n\r\n    var keyinfo = SKGL.SKM.GetKeyInformationFromParameters(result);\r\n\r\n    if(result.ContainsKey(\"error\") && result[\"error\"] != \"\")\r\n    {\r\n        Assert.Fail();\r\n    }\r\n}\r\n```\r\n\r\n###Calculating Machine code\r\nMachine code can be calculated with the function below. Any other hash algorithm will do, as long as it only contains letters and digits only.\r\n```\r\npublic void TestingHashes()\r\n{\r\n    //eg. \"61843235\" (getEightDigitsLongHash)\r\n    //eg. \"D38F13CAB8938AC3C393BC111E1A85BB4BA2CCC9\" (getSHA1)\r\n    string machineID1 = SKGL.SKM.getMachineCode(SKGL.SKM.getEightDigitsLongHash);\r\n    string machineID2 = SKGL.SKM.getMachineCode(SKGL.SKM.getSHA1);\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}